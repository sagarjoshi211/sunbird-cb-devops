@Library('your-shared-library') _

pipeline {
    agent any

    environment {
        ANSI_GREEN = "\u001B[32m"
        ANSI_NORMAL = "\u001B[0m"
        ANSI_BOLD = "\u001B[1m"
        ANSI_RED = "\u001B[31m"
        ANSI_YELLOW = "\u001B[33m"
    }

    stages {
        stage('Checkout Public Repository') {
            steps {
                script {
                    folder = new File("$WORKSPACE/.git")
                    if (folder.exists()) {
                        echo "Found .git folder. Clearing it.."
                        sh 'git clean -fxd'
                    }
                    checkout scm
                }
            }
        }

        stage('Deploy Cassandra Backup') {
            steps {
                script {
                    def values = [:]
                    def envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-3].trim()
                    def module = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
                    def jobName = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-1].trim()
                    def currentWs = sh(returnStdout: true, script: 'pwd').trim()
                    def ansiblePlaybook = "${currentWs}/ansible/cassandra-backup.yml"
                    def ansibleExtraArgs = "--tags \"cassandra-backup\" --vault-password-file /var/lib/jenkins/secrets/vault-pass"

                    values.put('currentWs', currentWs)
                    values.put('env', envDir)
                    values.put('module', module)
                    values.put('jobName', jobName)
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)

                    echo "Running Ansible playbook with the following values:"
                    echo "Environment Directory: ${envDir}"
                    echo "Module: ${module}"
                    echo "Job Name: ${jobName}"
                    echo "Current Workspace: ${currentWs}"
                    echo "Ansible Playbook Path: ${ansiblePlaybook}"
                    echo "Ansible Extra Args: ${ansibleExtraArgs}"

                    ansible_playbook_run(values)

                    // Adding the execution of the Cassandra backup shell script
                    echo "Running Cassandra backup shell script"
                    sh '/opt/scripts/backup.sh'

                    currentBuild.result = 'SUCCESS'
                    currentBuild.description = "Private: ${params.private_branch}, Public: ${params.branch_or_tag}"
                }
            }
        }
    }

    post {
        always {
            script {
                slack_notify(currentBuild.result)
                email_notify()
            }
        }
    }
}
